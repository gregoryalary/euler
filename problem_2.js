/**
 * Problem : Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be :
 *           1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *           By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 * Solution : This solution uses a memoize version of the recursive fibonacci method to optimize the solution.
 *            This offers a complexity of O(n) instead of O(1.6180^n)
 * 
 * Complexity : 0(n)
 */

const memoize_fibonacci = () => {
    const memo = {};

    const fibonacci = (n) => {
        if (n in memo) {
            return memo[n];
        } else {
            return n <= 2 ? n : fibonacci(n - 1) + fibonacci (n - 2);   
        }
    }

    return (n) => {
        if (n in memo) {
            return memo[n];
        } else {
            const result = fibonacci(n);
            memo[n] = result;
            return result;
        }
    }
}

const problem_2 = (max_term) => {
    const memoized_fibonacci = memoize_fibonacci();
    let sum = 0;
    let last_term = 0;

    for (let n = 1; last_term <= max_term; n = n + 1) {
        last_term = memoized_fibonacci(n);

        if (last_term % 2 === 0 && last_term <= max_term) {
            sum = sum + last_term;
        }
    }

    return sum;
}

console.log(problem_2(4000000)); // -> 4613732